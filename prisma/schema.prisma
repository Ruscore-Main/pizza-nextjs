generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url = env("POSTGRES_URL") // uses connection pooling
    directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Category {
    id Int @id @default(autoincrement())
    name String @unique

    products Product[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

}

model Product {
    id Int @id @default(autoincrement())

    name String
    imageUrl String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    category Category @relation(fields: [categoryId], references: [id])
    categoryId Int

    ingredients Ingredient[]
    productOptions ProductOption[]
}

model ProductOption {
    id Int @id @default(autoincrement())

    price Int
    size Int?
    pizzaType Int?

    product Product @relation(fields: [productId], references: [id])
    productId Int

    cartItems CartItem[]
}

model Ingredient {
    id Int @id @default(autoincrement())

    name String
    price Int
    imageUrl String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    products Product[]
    cartItems CartItem[]
}

enum UserRole {
    USER
    ADMIN
}

model User {
    id Int @id @default(autoincrement())

    fullName String
    email String @unique
    password String
    role UserRole @default(USER)
    verified DateTime

    provider String?
    providerId String?

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    cart Cart?
    verificationCode VerificationCode?
    orders Order[]
}

model Cart {
    id Int @id @default(autoincrement())
    
    totalPrice Int @default(0)

    token String // Если у корзины есть токен - у незарегистрированного юзера будет привязана своя корзина / Для cookie/localStorage
    
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    
    user User? @relation(fields: [userId], references: [id])
    userId Int? @unique

    cartItems CartItem[]
}

model CartItem {
    id Int @id @default(autoincrement())

    amount Int @default(1)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    productOption ProductOption @relation(fields: [productOptionId], references: [id])
    productOptionId Int

    cart Cart @relation(fields: [cartId], references: [id])
    cartId Int

    ingredients Ingredient[]
}

enum OrderStatus {
    PENDING
    SUCCEEDED
    CANCELLED
}

model Order {
    id Int @id @default(autoincrement())

    user User? @relation(fields: [userId], references: [id])
    userId Int
    token String
    satus OrderStatus
    paymentId String?

    items Json

    fullName String
    email String
    phone String
    address String
    comment String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model VerificationCode {
    id Int @id @default(autoincrement())

    user User @relation(fields: [userId], references: [id])
    userId Int @unique

    code String
    createdAt DateTime @default(now())
}